struct vertex_in {
	pos: float3;
}

struct vertex_out {
	pos: float4;
}

fun pos(input: vertex_in): vertex_out {
	var output: vertex_out;
	
	output.pos.x = input.pos.x;
	output.pos.y = input.pos.y;
	output.pos.z = 0.5;
	output.pos.w = 1.0;

	return output;
}

fun pix(input: vertex_out): float4[6] {
	var output: float4[6];
	
	output[0].x = 1.0;
	output[0].y = 0.0;
	output[0].z = 0.0;
	output[0].w = 1.0;
	
	output[1].x = 1.0;
	output[1].y = 0.0;
	output[1].z = 0.0;
	output[1].w = 1.0;
	
	output[2].x = 1.0;
	output[2].y = 0.0;
	output[2].z = 0.0;
	output[2].w = 1.0;
	
	output[3].x = 1.0;
	output[3].y = 0.0;
	output[3].z = 0.0;
	output[3].w = 1.0;
	
	output[4].x = 1.0;
	output[4].y = 0.0;
	output[4].z = 0.0;
	output[4].w = 1.0;
	
	output[5].x = 1.0;
	output[5].y = 0.0;
	output[5].z = 0.0;
	output[5].w = 1.0;
	
	return output;
}

#[pipe]
struct pipeline {
	vertex = pos;
	fragment = pix;
	format0 = TEXTURE_FORMAT_RGBA8_UNORM;
	format1 = TEXTURE_FORMAT_RGBA8_UNORM;
	format2 = TEXTURE_FORMAT_RGBA8_UNORM;
	format3 = TEXTURE_FORMAT_RGBA8_UNORM;
	format4 = TEXTURE_FORMAT_RGBA8_UNORM;
	format5 = TEXTURE_FORMAT_RGBA8_UNORM;
}

struct fs_vertex_in {
	pos: float2;
}

struct fs_vertex_out {
	pos: float4;
	tex_coord: float2;
}

fun fs_pos(input: fs_vertex_in): fs_vertex_out {
	var madd: float2;
	madd.x = 0.5;
	madd.y = 0.5;
	
	var output: fs_vertex_out;
	output.tex_coord = input.pos.xy;

	output.pos.x = input.pos.x;
	output.pos.y = input.pos.y;
	output.pos.z = 0.5;
	output.pos.w = 1.0;

	return output;
}

#[set(fs)]
const fs_texture: texcube;

#[set(fs)]
const fs_sampler: sampler;

fun fs_pix(input: fs_vertex_out): float4 {
	var tex_coord: float3;
	tex_coord.x = input.tex_coord.x;
	tex_coord.y = input.tex_coord.y;
	tex_coord.z = 0.0;
	return sample_lod(fs_texture, fs_sampler, tex_coord, 0.0);
}

#[pipe]
struct fs_pipeline {
	vertex = fs_pos;
	fragment = fs_pix;
}
