struct vertex_in {
	pos: float3;
}

struct vertex_out {
	pos: float4;
}

fun pos(input: vertex_in): vertex_out {
	var output: vertex_out;
	
	output.pos.x = input.pos.x;
	output.pos.y = input.pos.y;
	output.pos.z = 0.5;
	output.pos.w = 1.0;

	return output;
}

fun pix(input: vertex_out): float4 {
	var output: float4;
	output.x = 1.0;
	output.y = 0.0;
	output.z = 0.0;
	output.w = 1.0;
	return output;
}

#[pipe]
struct pipeline {
	vertex = pos;
	fragment = pix;
	format = TEXTURE_FORMAT_RGBA32_FLOAT;
}

#[root_constants]
const copy_constants: {
	size: uint2;
};

#[set(compute)]
const copy_source_texture: tex2d;

#[set(compute), write]
const copy_destination_texture: tex2d;

#[compute, threads(8, 8, 1)]
fun comp(): void {
	var index: uint2 = dispatch_thread_id().xy;
	if (index.x < copy_constants.size.x && index.y < copy_constants.size.y) {
		copy_destination_texture[index] = copy_source_texture[index];
	}
}
