struct vertex_in {
	pos: float3;
	tex: float2;
}

struct vertex_out {
	pos: float4;
	tex: float2;
}

#[set(everything)]
const constants: {
	mvp: float3x3;
};

fun pos(input: vertex_in): vertex_out {
	var output: vertex_out;
	
	var position: float3;
	position.xy = input.pos.xy;
	position.z = 0.5;
	
	output.pos = float4(constants.mvp * position, 1.0);

	output.tex = input.tex;
	
	return output;
}

#[set(everything)]
const comp_texture: tex2d;

#[set(everything)]
const comp_sampler: sampler;

fun pix(input: vertex_out): float4 {
	var color: float4 = sample(comp_texture, comp_sampler, input.tex);
	return float4(color.r, color.g, color.b, 1.0);
}

#[pipe]
struct pipeline {
	vertex = pos;
	fragment = pix;
}

#[set(compute)]
const compute_constants: {
	roll: float;
};

#[set(compute), write]
const dest_texture: tex2d;

#[compute, threads(16, 16, 1)]
fun comp(): void {
	var store_pos: uint2 = dispatch_thread_id().xy;
	var local_coef: float = length(float2(int2(group_thread_id().xy) - 8) / 8.0);
	var global_coef: float = sin(float(group_id().x + group_id().y) * 0.1 + compute_constants.roll) * 0.5;
	dest_texture[store_pos] = float4(1.0 - global_coef * local_coef, 0.0, 0.0, 1.0);
}
